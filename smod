#!/usr/bin/env python

"""SequenceMotifDecomposer (SMoD) is a motif finder algorithm.

Version: 1.1
Author: Fabrizio Costa [costa@informatik.uni-freiburg.de]

Usage:
  smod -i FILE [--neg FILE] [-t N] [-m FILE] [-o PATH] [-n N] [-p N]
       [-c N] [--min_subarray_size N] [--max_subarray_size N]
       [--similarity_th N] [--min_score N] [--min_freq N]
       [--min_cluster_size N] [--regex_th N] [--sample_size N]
       [--freq_th N] [--std_th N]
       [--verbose]
  smod (-h | --help)
  smod --version

Options:
  -i FILE                 Specify input fasta file for positive seqs.
  --neg FILE              Specify input fasta file for negative seqs.
  -m FILE                 Model file. If specified no fitting is performed
                          [default: None]
  -t N                    The num of permutations for each positive
                          sequence [default: 1].
  -c N                    Feature complexity [default: 5].
  -p N                    P-value [default: 0.05].
  -n N                    Specify the num of clusters [default: 20].
  -o PATH                 Dir name for output files [default: out].
  --min_subarray_size N   The min num of nt in a motif [default: 4].
  --max_subarray_size N   The max num of nt in a motif [default: 10].
  --similarity_th N       The min relative edit distance to merge two motives
                          [default: 0.5].
  --min_score N           The min num of nt in a motif that need to have a
                          freq > min_freq [default: 4].
  --min_freq N            Min freq in the alignment [default: 0.5].
  --min_cluster_size N    Min num of seqs selected for a motif [default: 10].
  --regex_th N            Min freq for a nt to be selected in the regex
                          expression [default: 0.3].
  --sample_size N         The num of sequences randomly sampled to
                          build the alignment for a motif [default: 200].
  --freq_th N             The min freq of a regex seq (use 0 to deactivate)
                          [default: 0.03].
  --std_th N              The max standard deviation for the localization of a
                          rgex seq (use 0 to deactivate) [default: 25].
  -h --help               Show this screen.
  --version               Show version.
  --verbose               Print more text.


"""

import os
import logging
import logging.handlers

from docopt import docopt
from eden.sequence_motif_decomposer import SequenceMotifDecomposer as SMoD
from eden.converter.fasta import fasta_to_sequence
from eden.modifier.seq import seq_to_seq, shuffle_modifier
from eden.util import serialize_dict, configure_logging
import multiprocessing

logger = logging.getLogger('eden')


def load_single(fname):
    """load_single."""
    seqs = fasta_to_sequence(fname)
    seqs = list(seqs)
    return seqs


def load(pos_fname, neg_fname=None, times=1):
    """load."""
    pos_seqs = load_single(pos_fname)

    if neg_fname is None:
        neg_seqs = fasta_to_sequence(pos_fname)
        neg_seqs = seq_to_seq(
            neg_seqs, modifier=shuffle_modifier, times=times, order=1)
        neg_seqs_ord1 = list(neg_seqs)

        neg_seqs = fasta_to_sequence(pos_fname)
        neg_seqs = seq_to_seq(
            neg_seqs, modifier=shuffle_modifier, times=times, order=2)
        neg_seqs_ord2 = list(neg_seqs)

        neg_seqs = neg_seqs_ord1 + neg_seqs_ord2
    else:
        neg_seqs = load_single(neg_fname)

    return pos_seqs, neg_seqs


def save(outdir, pos_fname, smod, motives, seqs, p_value=0.05):
    """save."""
    if not os.path.exists(outdir):
        os.mkdir(outdir)
    model_name = outdir + '/' + 'smod.model'
    smod.save(model_name)
    logger.info('Model saved in %s' % model_name)

    out_fname = outdir + '/' + 'motif'
    data = smod.report(seqs, motives, fname=out_fname)
    out_fname = outdir + '/report.md'
    with open(out_fname, 'w') as f:
        f.write('### %s\n' % pos_fname)
        f.write(data)
    logger.info('Report saved in %s' % out_fname)
    logger.info('Convert for visualization, e.g. using md2pdf out/report.md')

    iterable = smod.decompose(seqs, p_value=p_value)
    out_fname = outdir + '/' + 'decomposition.txt'
    with open(out_fname, 'w') as f:
        for header, begin, end, p, subseq in iterable:
            f.write('%s %d %d %.2E %s\n' % (header, begin, end, p, subseq))
    logger.info('Decomposition saved in %s' % out_fname)

    for cluster_id in motives:
        out_fname = outdir + '/motif_' + str(cluster_id) + '.fa'
        with open(out_fname, 'w') as f:
            seqs = motives[cluster_id]['seqs']
            for h, s in seqs:
                f.write('%s\n%s\n' % (h, s))

        out_fname = outdir + '/motif_' + str(cluster_id) + '.aln'
        with open(out_fname, 'w') as f:
            seqs = motives[cluster_id]['trimmed_align_seqs']
            for h, s in seqs:
                f.write('%s\n%s\n' % (h, s))
    logger.info('Motives saved in %s/motif_nn.fa and %s/motif_nn.aln' %
                (outdir, outdir))


def main(args):
    """Main."""
    logger.debug('Program invoked with parameters:')
    logger.debug(serialize_dict(args))

    # setup variables
    pos_fname = args['-i']
    neg_fname = args['--neg']
    model_fname = args['-m']
    times_neg = int(args['-t'])
    outdir = args['-o']
    complexity = int(args['-c'])
    p_value = float(args['-p'])
    n_clusters = int(args['-n'])
    min_subarray_size = int(args['--min_subarray_size'])
    max_subarray_size = int(args['--max_subarray_size'])
    similarity_th = float(args['--similarity_th'])
    min_score = int(args['--min_score'])
    min_freq = float(args['--min_freq'])
    min_cluster_size = int(args['--min_cluster_size'])
    regex_th = float(args['--regex_th'])
    sample_size = int(args['--sample_size'])
    freq_th = float(args['--freq_th'])
    if freq_th == 0:
        freq_th = None
    std_th = float(args['--std_th'])
    if std_th == 0:
        std_th = None

    # load data
    pos_seqs, neg_seqs = load(pos_fname, neg_fname=neg_fname, times=times_neg)
    if model_fname != 'None':
        smod = SMoD()
        smod.load(model_fname)
    else:
        pos_size = len(pos_seqs)
        neg_size = len(neg_seqs)
        n_cpus = multiprocessing.cpu_count()
        pos_block_size = pos_size / n_cpus
        neg_block_size = neg_size / n_cpus

        smod = SMoD(complexity=complexity,
                    n_clusters=n_clusters,
                    min_subarray_size=min_subarray_size,
                    max_subarray_size=max_subarray_size,
                    pos_block_size=pos_block_size,
                    neg_block_size=neg_block_size)

        smod = smod.fit(pos_seqs, neg_seqs)
    motives = smod.select_motives(seqs=pos_seqs,
                                  p_value=p_value,
                                  similarity_th=similarity_th,
                                  min_score=min_score,
                                  min_freq=min_freq,
                                  min_cluster_size=min_cluster_size,
                                  regex_th=regex_th,
                                  sample_size=sample_size,
                                  freq_th=freq_th,
                                  std_th=std_th)
    # write
    save(outdir, pos_fname, smod, motives, pos_seqs, p_value=p_value)

if __name__ == '__main__':
    args = docopt(__doc__, version='smod 1.0')
    if args['--verbose']:
        verbosity = 2
    else:
        verbosity = 1
    configure_logging(logger,
                      verbosity=verbosity,
                      filename='smod.log')
    main(args)
